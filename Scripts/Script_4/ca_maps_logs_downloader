#!/usr/bin/env expect 
if {[llength $argv] <= 2} {
puts "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
\n               Usages: this_script \[Node_IP\] \[Download_to_this_path(Optional: default will be used as ./ )\]\n\
\
\n               Node_IP : 102 will be treated as 192.168.143.102\
\n                         241.244 will be treated as 192.168.241.244\
\n                         169.200.100 will be treated as 192.169.200.100\
\n                         172.124.143.102 will be Taken as complete IP as it is given.\
\
\n               Card_Slot:Give only if want to goto that card directly. If not given you will taken to node not to card.\
\n                         Script will try to get icc ip automatically.Ex:For BR_10_0_2 its 127.7.1.slot but for BR_8_0_1 its 127.1.1.slot\n
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
if {[llength $argv] < 1} { exit;
}
}
#   exp_internal 1
 # timeout -1 means infinite
    set timeout 300
    set NO_CRASH 2
    set null_value "";
    set ip_part [lindex $argv 0];
    set download_at_this_path [lindex $argv 1];
    if { $download_at_this_path == $null_value } {
                                                   set download_at_this_path ".";
                                                 } 
    set slot [lindex $argv 2];
    set user "guest";
    set user_pass "iltwat";
    set su_user "root";
    set su_user_pass "swtn100tj";
    set port "2023";
    set sleep_time "4";
    set log_dir_path "/etc/tejas/log/";
    set maps_dir_path "/etc/tejas/log/";
    set img_md5info_file_path "/etc/tejas/log/img_md5info";
    set control_card_img_regexp "/etc/bin/tejas/*.img";
    set intelligent_card_img_regexp "/etc/tejas/builds/*/*.img";
    set img_md5info_command "md5sum $control_card_img_regexp $intelligent_card_img_regexp >$img_md5info_file_path 2>/dev/null & disown";
#flexible IP addressing
#So that u can provide 102 or 241.244 or 169.143.102 or 172.124.36.102 as IP.
    regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $ip_part all first second third fourth
if { $fourth != $null_value } {
   set ip "$all"
} elseif { $third != $null_value } {
   set ip "192\.$first\.$second\.$third"
} elseif { $second != $null_value } {
   set ip "192\.168\.$first\.$second"
} elseif { $first != $null_value } {
   set ip "192\.168\.143\.$first"
} else { puts "Invalid IP"; exit; }
puts "\n\nNODE IP is $ip \n"

if { $slot == $null_value } {
        spawn telnet $ip $port
        set node_spawn_id $spawn_id
        expect "*login*"
        send "$user\r"
        expect "*assword*"
        send "$user_pass\r"
        expect "*>"
        send "su\r"
        expect "*assword*"
        send "$su_user_pass\r"
        expect "*#"
        send "cd $log_dir_path \r" 
        expect "*#"
        send "stty -echo\r"
		expect "*"
        send "ltd=(\$(grep -nriI \"stackdump\" . | awk 'BEGIN { FS = \":\" } { printf(\$1\"\\n\") }' | uniq ))\r"
        expect "*"
        expect -re {(\S+)\r\n}
        send "if \[\[ \${#ltd} -ne 0 \]\];then tmp=(\$(for log in \${ltd\[@\]};do readlink -f \$log | tr '\\n' ' ' ;done));echo \${tmp\[@\]} ; else echo NOT_FOUND ; fi\r"        
        expect -re {(\S+)\r\n}
        set logs_to_get $expect_out(buffer)
        send "stty echo\r $img_md5info_command \r"
        expect "*"
        send "exit\r"
        close $node_spawn_id
        set logs_to_get [string trimright "$logs_to_get" '\n']
        set logs_to_get [string trimright "$logs_to_get" '\r']
        set getlog [split $logs_to_get " "]
        set finallog [lsearch -all -inline -not -regexp $getlog "bash.*#"]
        if {[lsearch -exact $finallog "NOT_FOUND"] >= 0} {
            puts "Log having Crash is coming as NOT_FOUND. So there is no crash. Exiting ...!!!"
            exit $NO_CRASH 
           }
        set filenames {}
        set daemons_tmp {}
        set daemons {}
        set daemon_maps {}
        foreach file_path $finallog {
                                      set file_name [file tail $file_path]
                                      lappend filenames $file_name
                                      set daemon_name [regsub {dlog.*} $file_name ""]
                                      set daemon_name [regsub {^init} $daemon_name ""]
                                      lappend daemons_tmp [string tolower $daemon_name]
                                    }
        set daemons [lsort -unique $daemons_tmp]
        foreach daemon $daemons { set dmn_tmp "" ; set dmn_tmp2 "" ; append dmn_tmp $daemon ".maps" ; append dmn_tmp2 $maps_dir_path $dmn_tmp ; lappend daemon_maps $dmn_tmp2 }
        puts "logs to get are $finallog"
        puts "file names are $filenames"
        puts "daemons are $daemons"
        puts "daemon maps are $daemon_maps"
        puts "Sleeping for $sleep_time before doing ncftpget. So that md5info file get generated."
        sleep $sleep_time
        eval spawn ncftpget -u$user -p$user_pass $ip $download_at_this_path $finallog $daemon_maps $img_md5info_file_path
        set ncftp_spawn_id $spawn_id
        interact
        #stty raw -echo
        #expect_after {
        #        -i $user_spawn_id
        #        "y" {send "rm -fr SysConf.* backconf.*\rcp defaultCfg\/* .\r"; exp_continue}
        #        "n" {send "\r\r"; exp_continue}
        #}
        #expect "> "
        #send "ls /usr/sbin/tejas | grep 'initialize.sh'
}

# if {[llength $argv] == 2} {
if { $slot != $null_value} {
puts "for line cards still have to implement this."
exit
spawn telnet $ip $port
#       spawn telnet 10.51.182.$node_ip 2023
       set node_spawn_id_2 $spawn_id
       expect "*login*"
       send "$user\r"
       expect "*assword*"
       send "$user_pass\r"
       expect "*>"
       send "su\r"
       expect "*assword*"
       send "$su_user_pass\r"
       expect "*#"
send -i $node_spawn_id_2 "\
total_icc=`route|grep icc|wc -l`;echo \$total_icc;\r\
basic_icc=`route|grep icc|grep 127.\[0-1\]|wc -l`;echo \$basic_icc;\r\
special_icc=\$(( \$total_icc - \$basic_icc ))\r\
if \[ \"\$special_icc\" == \"0\" \]; then\r\
route|grep icc|grep 127\.1\r\
else\r\
route|grep icc|grep 127\.\[2-9\]\r\
fi\r\
\r"
       expect {
               -re {127\.(\S+)\.1\.[0-9]} {
               				 set icc_ip_string $expect_out(1,string)
             				 regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $icc_ip_string icc_ip_second_byte
               			      }
              } 
#       send "cd \/tmp\r"
#       expect "# "
#       send "rm *.hex\r"
#       expect "# "
#	send "ncftpget -uhexftp -piltwat 192.168.0.14 /tmp /home/hexftp/hex/mc/plc02/elk/fpga_edited/$wld\r"
#	expect "# "
       send "telnet 127.$icc_ip_second_byte.1.$slot $port\r"
       expect "*login*"
       send "$user\r"
       expect "*assword*"
       send "$user_pass\r"
       send "su\r"
       expect "*assword*"
       send "$su_user_pass\r"
       expect "*#"
       send "cd \/etc\/tejas\/log\r"
       expect "# "
       send "export LD_LIBRARY_PATH=/usr/sbin/tejas/sharedobj\r"
#send "cd \/tmp\r"
#        expect "# "
#        send "ncftpget -uguest -piltwat 127.1.1.254 . /tmp/$wld\r"
#        expect "# "
#        send "mv $wld elk.hex\r"
#        expect "# "

 send "tail \-f *log00*\r"
     expect "# "
        interact
}
