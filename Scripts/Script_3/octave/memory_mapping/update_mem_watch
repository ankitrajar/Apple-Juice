#!/usr/bin/expect -f
set force_conservative 0  ;# set to 1 to force conservative mode even if
                          ;# script wasn't run conservatively originally
if {$force_conservative} {
        set send_slow {1 .1}
        proc send {ignore arg} {
                sleep .1
                exp_send -s -- $arg
        }
}
if {[llength $argv] <= 1} {
puts "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
\n               Usages: update \[Node_IP\] 
\
\n               Node_IP : 102 will be treated as 192.168.143.102\
\n                         241.244 will be treated as 192.168.241.244\
\n                         169.200.100 will be treated as 192.169.200.100\
\n                         172.124.143.102 will be Taken as complete IP as it is given.\n\
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
if {[llength $argv] < 1} { exit;
}
}

   set ip_part [lindex $argv 0];
   set slot [lindex $argv 1];
#   set icc_ip_second_byte [lindex $argv 2];
   set user "guest";
   set user_pass "iltwat";
   set su_user "root";
   set su_user_pass "swtn100tj";
   set tempdir "temp_cef5logs";
   set null_value "";
   set my_username "parmil";
   set udsc "_";
   set port "2023";
#flexible IP addressing
#So that u can provide 102 or 241.244 or 169.143.102 or 172.124.36.102 as IP.
    regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $ip_part all first second third fourth
if { $fourth != $null_value } {
   set ip "$all"
} elseif { $third != $null_value } {
   set ip "192\.$first\.$second\.$third"
} elseif { $second != $null_value } {
   set ip "192\.168\.$first\.$second"
} elseif { $first != $null_value } {
   set ip "192\.168\.143\.$first"
} else { puts "Invalid IP"; exit; }
puts "\n\nNODE IP is $ip \n"
set local_dir "/home/parmil/myscripts/octave/img_sec";

#Copying logs from cef5 to xcc.
#spawn ssh $user@$ip
#set node_spawn_id_2 $spawn_id
#expect {
#    "*yes/no*" {
#        send "yes\r"
#        exp_continue
#    }
#
#    "*asswor*:" {
#        send "$user_pass\r"
#    }
#}
spawn telnet $ip $port
set node_spawn_id_2 $spawn_id
expect "*login*"
send "$user\r"
expect "*assword*"
send "$user_pass\r"
expect "*>"
send "su\r";
expect "*asswor*:" 
send "$su_user_pass\r";
expect "*#"
send -i $node_spawn_id_2 "\
total_icc=`route|grep icc|wc -l`;echo \$total_icc;\r\
basic_icc=`route|grep icc|grep 127.\[0-1\]|wc -l`;echo \$basic_icc;\r\
special_icc=\$(( \$total_icc - \$basic_icc ))\r\
if \[ \"\$special_icc\" == \"0\" \]; then\r\
route|grep icc|grep 127\.1\r\
else\r\
route|grep icc|grep 127\.\[2-9\]\r\
fi\r\
\r"
       expect {
               -re {127\.(\S+)\.1\.[0-9]} {
                                         set icc_ip_string $expect_out(1,string)
                                         regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $icc_ip_string icc_ip_second_byte
                                      }
              }
send "cd /tmp\r";
expect "*#"
send "mkdir $tempdir\r";
expect "*#"
send "ncftpget -u$su_user -p$su_user_pass 127.1.2.253 /tmp/$tempdir /etc/tejas/mem_watch_output.txt\r";
#expect "*#"
#send "cd $tempdir\r";
#expect "*#"
#send "ftp 127.$icc_ip_second_byte.1.$slot\r";
#expect "*):"
#send "root\r";
#expect "*asswor*" 
#send "$su_user_pass\r";
#expect "*>"
#send "cd /etc/tejas/log/\r";
#expect "*>" 
#send "prompt\r";
#expect "*>"       
#send "mget *\r";
#expect "*>" 
#send "exit\r";
expect "*#"
send "ls -l\r";
expect "*#"
send "exit\r";
expect "*>"       
send "exit\r";

#Downloading the logs from Xcc to local machine
spawn $env(SHELL)
expect "*$ "
send "cd $local_dir;pwd\r";
expect "*$ "
send "ncftpget  -u$user -p$user_pass $ip $local_dir/ /tmp/$tempdir/mem_watch_output.txt\r";
expect "*$ "
send "ncftpget  -u$user -p$user_pass $ip /home/parmil/myscripts/octave/img_prim/ /etc/tejas/mem_watch_output.txt\r";
expect "*$ "
send "pwd\r";
expect "*$ "
send "pwd\r";
expect "*$ "
send "logout\r";

#Cleaning logs from xcc
#spawn ssh $user@$ip
#set node_spawn_id $spawn_id
#expect {
#    "*yes/no*" {
#        send "yes\r"
#        exp_continue
#    }
#
#    "assword:" {
#        send "$user_pass\r"
#    }
#}
spawn telnet $ip $port
set node_spawn_id_2 $spawn_id
expect "*login*"
send "$user\r"
expect "*assword*"
send "$user_pass\r"
expect "*>"
send "su\r";
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "cd /tmp\r";
expect "*#"
send "rm -rf $tempdir\r";
expect "*#"
send "exit\r";
expect "*>"
send "exit\r";
expect eof
exit

