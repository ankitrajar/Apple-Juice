#!/usr/bin/expect
#   exp_internal 1
#   this option is for detailed debugging.
    set timeout 30
    set ip_part [lindex $argv 0];
    set image_path [lindex $argv 1];
#   set image_type [lindex $argv 2];
    set user "guest";
    set user_pass "iltwat";
    set su_user "root";
    set su_user_pass "swtn100tj";
    set my_pc_user "parmil"; ####set my_pc_user "$your_pc_username"; #<#<#$(whoami)#>#>#
    set my_pc_user_pass "iltwat"; ####set my_pc_user_pass "$your_pc_password";
    set null_value "";
    set half_ip "192.168.";
    set port "2023";
    set release_build_server_ip "192.168.0.14";
    set release_build_server_username "swtn100";
    set release_build_server_password "tn100sw";
    set release_base_dir "/home/swtn100/releases";
    set release_build_mode_string "rel";
    set release_build_branch_name [lindex $argv 2];
    set release_build_tag [lindex $argv 3];
    set release_build_type [lindex $argv 4];
    set image_extension ".squash.img"
    set image_name_delimeters "-_"
    set control_card_image_types {xcc360g tj1700 teraxc}
    set control_card_current_image_dir "/etc/bin/tejas";
    set control_card_previous_image_dir "/etc/bin/tejasPrevious";
    set control_card_next_image_dir "/etc/bin/tejasNext";
    set intelligent_card_image_types {cef5 plc01 cef4 pcpe01}
#   set intelligent_card_image_dir "/etc/tejas/builds/$image_type";
#   shifted after the $image_type is detected.
    set custom_card_image_types1 {for_future_use}
    set custom_card_image_types1_dir "/etc/tejas/custom1"
    set custom_card_image_types2 {for_future_use}
    set custom_card_image_types2_dir "/etc/tejas/custom2"
    set execution_shell "bash"

if {($ip_part != $release_build_mode_string) && ($ip_part != $null_value)} {
         #flexible IP addressing
         #So that u can provide 102 or 241.244 or 169.143.102 or 172.124.36.102 as IP.
         regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $ip_part all first second third fourth
         if { $fourth != $null_value } {
            set ip "$all"
         } elseif { $third != $null_value } {
            set ip "192\.$first\.$second\.$third"
         } elseif { $second != $null_value } {
            set ip "192\.168\.$first\.$second"
         } elseif { $first != $null_value } {
            set ip "192\.168\.143\.$first"
         } else { puts "Invalid IP"; exit; }
         puts "\nNODE IP is $ip \n"
}

if {(($image_path != $release_build_mode_string) && ([llength $argv] < 2)) && (($ip_part != $release_build_mode_string) && ([llength $argv] < 2)) } {
puts "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
\n               Usages:   1. up \[Node_IP\] \[Image\]\
\n                         2. up rel \n\
\
\n               Node_IP : 102 will be treated as 192.168.143.102\
\n                         241.244 will be treated as 192.168.241.244\
\n                         169.200.100 will be treated as 192.169.200.100\
\n                         172.124.143.102 will be Taken as complete IP as it is given.\
\
\n               Image :   You can give in any manner. You can even use relative path or just the image name from the directory where image is.\
\n                         script will automatically calculate the complete path of image.\
\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
if {(($image_path != $release_build_mode_string) && ([llength $argv] < 2)) && (($ip_part != $release_build_mode_string) && ([llength $argv] < 2)) } {
 exit;
}
}

if { $image_path != $release_build_mode_string && $ip_part != $release_build_mode_string } {
    puts "\nScript will try to upload image from your pc.\n"

    #Get system IP
    spawn hostname -I
    expect "192*"
    set my_ipaddr $expect_out(buffer)
    #other method to get IP.If above fails
    if { $my_ipaddr == $null_value } {
        spawn ifconfig
        expect -re {inet addr:192\.168\.(\S+)}
        set my_ipaddr [concat $half_ip$expect_out(1,string)]
    }
    puts "\nMy PC IP is $my_ipaddr\n"

#Trimming newline & return carriage from IP
set my_ipaddr [string trimright "$my_ipaddr" '\n']
set my_ipaddr [string trimright "$my_ipaddr" '\r']

#To handle the case when dir is NULL. so to get the pwd of image.
regexp "^(\.*/)?(\[^/\]*)$" $image_path full_image_path dir_path file_name
if { $dir_path == $null_value } {
	   spawn pwd
	   expect "/*"
	   set img_pwd $expect_out(buffer)
	   set dir_path [string trimright "$img_pwd" '\n']
	   set dir_path [string trimright "$dir_path" '\r']
}

#To handle addresses like ../../CEF5/tj100mc/../cef5.img
spawn readlink -e $dir_path
expect "/*"
set dir_path $expect_out(buffer)
if { $dir_path == $null_value } {
puts "Invalid Image Path"
exit;
}

#Trimming the existing newline & return carriage from dir_path & making it concatable.
set dir_path [string trimright "$dir_path" '\n']
set dir_path [string trimright "$dir_path" '\r']
set full_image_path [concat $dir_path/$file_name]

#After finishing the full_image_path final check if file exists or not.
if {[file exists $full_image_path]} {
    puts "File path seems ok!"
} else {
    puts "File doesn't exist. Please check the given Path"; exit;
}

#Detecting the image type
if { $file_name == $null_value } {
puts "File Name should not be NULL";
exit;
}
set get_image_type_script "image=\"$file_name\";if \[\[ \$image =~ $image_extension\$ \]\];then imgtype=\$\{image%%\[$image_name_delimeters\]*\}; echo \"\$imgtype\"; else echo \"invalid\"; fi"
set image_type [exec $execution_shell -c $get_image_type_script]
puts "Image Type Detected is $image_type"

if { $image_type == "invalid" } {
     puts "It seems that this image's extension is not $image_extension. So its invalid.";
     exit;
}
if {[lsearch -exact $control_card_image_types $image_type] >= 0} {
    puts "$image_type is a control_card_type_image!!!"
    set card_type "control_card"
} elseif {[lsearch -exact $intelligent_card_image_types $image_type] >= 0} {
    puts "$image_type is a intelligent_card_type_image!!!"
    set card_type "intelligent_card"
} elseif {[lsearch -exact $custom_card_image_types1 $image_type] >= 0} {
    puts "$image_type is a custom_card_image_types1!!!"
    set card_type "custom_card1"
} elseif {[lsearch -exact $custom_card_image_types2 $image_type] >= 0} {
    puts "$image_type is a custom_card_image_types2!!!"
    set card_type "custom_card2"
} else { puts "Unable to decide wheather its intelligent_card or control_card or any custom_type Type of image. Please add this to script."; exit;}
######
     set intelligent_card_image_dir "/etc/tejas/builds/$image_type";
######
puts "\nFull image path is $full_image_path \nDirectory Path is $dir_path \nFile Name is $file_name"
#Will check the card type and accordingly upload the image.

if { $card_type == "intelligent_card" } {
puts "Uploading $image_type image. Card Type : $card_type"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:" 
send "$su_user_pass\r";
expect "*#"
send "mkdir -p $intelligent_card_image_dir ; cd $intelligent_card_image_dir \r";
expect {
    "*No such file or directory*" {
        send "mkdir -p $intelligent_card_image_dir ; cd $intelligent_card_image_dir; pwd;\r"
    }

    "*#" {
        send "rm -rf $intelligent_card_image_dir/*;\r ls -lrt ; pwd\r"
    }
}
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\.md5\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
} elseif { $card_type == "control_card" } {
puts "Uploading $image_type image. Card Type : $card_type"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "cd $control_card_current_image_dir\r"
expect "*#"
send "stty -echo ; image=\$\(ls -1t --color=never \*$image_extension\);\r"
expect "*#"
send "if \[\[ \$image =~ $image_extension\$ \]\];then imgtype=\$\{image%%\[$image_name_delimeters\]*\}; echo \"\$imgtype\"; else echo \"invalid\"; fi \r"
expect -re {(\S+)\r\n}
set existing_image_type $expect_out(1,string)
if { $image_type != $existing_image_type } {
puts "\n\nThe current image type being used at node is different than what u r uploading.\n\
 Please retry with correct image.\n Current image being used is $existing_image_type \n You are trying to upload $image_type"
#exit;
send "stty echo\r"
expect "*#"
interact
}
send "mount -o remount rw $control_card_next_image_dir/.. 2\>/dev/null; mount -o remount rw $control_card_next_image_dir 2\>/dev/null\r"
expect "*#"
send "cd $control_card_next_image_dir\r"
expect "*#"
send "rm -rf $control_card_next_image_dir/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
send "stty echo\r"
interact
} elseif { $card_type == "custom_card1" } {
puts "Uploading $image_type image. Card Type : $card_type"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "mount -o remount rw $custom_card_image_types1_dir/.. 2\>/dev/null; mkdir -p $custom_card_image_types1_dir ; cd $custom_card_image_types1_dir\r"
expect "*#"
send "mount -o remount rw $custom_card_image_types1_dir 2\>/dev/null\r"
expect "*#"
send "cd $custom_card_image_types1_dir\r"
expect "*#"
send "rm -rf $custom_card_image_types1_dir/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
}  elseif { $card_type == "custom_card2" } {
puts "Uploading $image_type image. Card Type : $card_type"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "mount -o remount rw $custom_card_image_types2_dir/.. 2\>/dev/null; mkdir -p $custom_card_image_types2_dir ; cd $custom_card_image_types2_dir\r"
expect "*#"
send "mount -o remount rw $custom_card_image_types2_dir 2\>/dev/null \r"
expect "*#"
send "cd $custom_card_image_types2_dir\r"
expect "*#"
send "rm -rf $custom_card_image_types2_dir/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
}

} elseif { ($image_path == $release_build_mode_string) || ($ip_part == $release_build_mode_string)} {
if {[llength $argv] < 4} {
puts "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\
\n        Usages: up \[Node_IP\] \[rel\] \[Release Branch Name(without BR)\] \[Branch Tag\] \[Image Type(Optional. Automatically detects if not give)\]\n\
\
\n        Example : up 102 rel 10_0_2 a3 tj1700(this is Optional. script will automatically detect if its xcc360g or whatever.)\
\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
if {[llength $argv] < 4} { exit;
}
}

puts "\nScript will try to upload from release build server: $release_build_server_ip\n";
puts "Uploading image"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "cd $control_card_current_image_dir\r"
expect "*#"
send "stty -echo ; image=\$\(ls -1t --color=never \*$image_extension\);\r"
expect "*#"
send "if \[\[ \$image =~ $image_extension\$ \]\];then imgtype=\$\{image%%\[$image_name_delimeters\]*\}; echo \"\$imgtype\"; else echo \"invalid\"; fi \r"
expect -re {(\S+)\r\n}
set existing_image_type $expect_out(1,string)
if { $release_build_type == $null_value } {
	set release_build_type $existing_image_type
	puts "Script found that release_build_type is null so setting it to $existing_image_type";
}
if {$release_build_type != $existing_image_type} {
puts "\n\nThe current image type being used at node is different than what u r uploading($release_build_type).\n\
Please retry with correct image.\n Current image being used is $existing_image_type"
#exit;
send "stty echo\r"
interact
}
set full_image_path ${release_base_dir}/REL_${release_build_branch_name}/a_x/${release_build_tag}/builds/${release_build_type}-ppc-REL_${release_build_branch_name}_${release_build_tag}.squash.img
expect "*#"
send "stty echo\r"
expect "*#"
send "mount -o remount rw $control_card_next_image_dir/.. 2\>/dev/null ; mount -o remount rw $control_card_next_image_dir 2\>/dev/null \r"
expect "*#"
send "cd $control_card_next_image_dir\r"
expect "*#"
send "rm -rf $control_card_next_image_dir/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$release_build_server_username -p$release_build_server_password $release_build_server_ip . $full_image_path\.md5\r"
expect "*#"
send "ncftpget -u$release_build_server_username -p$release_build_server_password $release_build_server_ip . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
puts "\nRelease builds are mostly unified tarkit. That means you have to delete image from /etc/tejas/builds/*\n";
expect "*#"
puts "\nRelease builds are mostly unified tarkit. That means you have to delete image from /etc/tejas/builds/*\n";
send "cd /etc/tejas/builds ; ls * ;\r"
expect "*#"
interact
} else { puts "\nInvalid Usages :( \n"; exit;}
