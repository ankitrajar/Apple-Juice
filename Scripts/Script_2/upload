#!/usr/bin/expect
    set timeout 15
    set ip_part [lindex $argv 0];
    set image_path [lindex $argv 1];
#   set image_type [lindex $argv 2];
    set user "guest";
    set user_pass "iltwat";
    set su_user "root";
    set su_user_pass "swtn100tj";
    set cef5_dir "/etc/tejas/builds/cef5";
    set xcc_dir_tej_next "/etc/bin/tejasNext";
    set xcc_dir_tej "/etc/bin/tejas";
    set xcc_dir_tej_prev "/etc/bin/tejasPrevious";
    set my_pc_user "parmil"; ####set my_pc_user "$your_pc_username"; #<#<#$(whoami)#>#>#
    set my_pc_user_pass "iltwat"; ####set my_pc_user_pass "$your_pc_password";
    set null_value "";
    set half_ip "192.168.";
    set port "2023";

if {[llength $argv] <= 2} {
puts "\n++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
\n               Usages: up \[Node_IP\] \[Image\]\n\
\
\n               Node_IP : 102 will be treated as 192.168.143.102\
\n                         241.244 will be treated as 192.168.241.244\
\n                         169.200.100 will be treated as 192.169.200.100\
\n                         172.124.143.102 will be Taken as complete IP as it is given.\
\
\n               Image :   You can give in any manner. You can even use relative path or just the image name from the directory where image is.\
\n                         script will automatically calculate the complete path of image.\n
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n";
if {[llength $argv] < 2} { exit;
}
}

#Get system IP
    spawn hostname -I
    expect "192*"
    set my_ipaddr $expect_out(buffer)
#other method to get IP.If above fails
if { $my_ipaddr == $null_value } {
    spawn ifconfig
    expect -re {inet addr:192\.168\.(\S+)}
    set my_ipaddr [concat $half_ip$expect_out(1,string)]
}

#flexible IP addressing
#So that u can provide 102 or 241.244 or 169.143.102 or 172.124.36.102 as IP.
    regexp "(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?\.?(\[0-9]{1,3})?" $ip_part all first second third fourth
if { $fourth != $null_value } {
   set ip "$all"
} elseif { $third != $null_value } {
   set ip "192\.$first\.$second\.$third"
} elseif { $second != $null_value } {
   set ip "192\.168\.$first\.$second"
} elseif { $first != $null_value } {
   set ip "192\.168\.143\.$first"
} else { puts "Invalid IP"; exit; }
puts "\n\nNODE IP is $ip \nMy PC IP is $my_ipaddr\n"

#Trimming newline & return carriage from IP
set my_ipaddr [string trimright "$my_ipaddr" '\n']
set my_ipaddr [string trimright "$my_ipaddr" '\r']

#To handle the case when dir is NULL. so to get the pwd of image.
regexp "^(\.*/)?(\[^/\]*)$" $image_path full_image_path dir_path file_name
if { $dir_path == $null_value } {
	   spawn pwd
	   expect "/*"
	   set img_pwd $expect_out(buffer)
	   set dir_path [string trimright "$img_pwd" '\n']
	   set dir_path [string trimright "$dir_path" '\r']
}

#To handle addresses like ../../CEF5/tj100mc/../cef5.img
spawn readlink -e $dir_path
expect "/*"
set dir_path $expect_out(buffer)
if { $dir_path == $null_value } {
puts "Invalid Image Path"
exit;
}

#Trimming the existing newline & return carriage from dir_path & making it concatable.
set dir_path [string trimright "$dir_path" '\n']
set dir_path [string trimright "$dir_path" '\r']
set full_image_path [concat $dir_path/$file_name]

#After finishing the full_image_path final check if file exists or not.
if {[file exists $full_image_path]} {
    puts "File path seems ok!"
} else {
    puts "File doesn't exist. Please check the given Path"; exit;
}

#Detecting the image type
if {[string match "*cef5*img" $file_name]} {
set image_type "cef5";
puts "Image Type Detected is $image_type"
} elseif {[string match "*xcc360g*img" $file_name]} {
set image_type "xcc360g";
puts "Image Type Detected is $image_type"
} elseif {[string match "*tj1700*img" $file_name]} {
set image_type "tj1700";
puts "Image Type Detected is $image_type"
} else { puts "Unkown Type of image. Modify the script to add new type."; exit; }
if { $file_name == $null_value } {
puts "File Name should not be NULL";
exit;
}
puts "\nFull image path is $full_image_path \nDirectory Path is $dir_path \nFile Name is $file_name"
#Will check the image type and accordingly upload the image.
if { $image_type == "cef5" } {
puts "Uploading CEF5 image"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:" 
send "$su_user_pass\r";
expect "*#"
send "cd $cef5_dir\r";
expect {
    "*No such file or directory*" {
        send "mkdir -p $cef5_dir;cd $cef5_dir;pwd;\r"
    }

    "*#" {
        send "rm -rf $cef5_dir/*;\r pwd\r"
    }
}
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\.md5\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
}

if { $image_type == "xcc360g" } {
puts "Uploading XCC360g image"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "ls $xcc_dir_tej\r"
expect "*img"
set current_img $expect_out(buffer)
if {![string match "*xcc360g*img" $current_img]} {
puts "\n\nThe current image type being used at node is different than what u r uploading.\n\
 Please retry with correct image.\n Current image being used is $current_img"
exit;
}
send "mount -o remount rw /etc/bin\r"
expect "*#"
send "cd $xcc_dir_tej_next\r"
expect "*#"
send "rm -rf $xcc_dir_tej_next/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\.md5\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
}

if { $image_type == "tj1700" } {
puts "Uploading XCC80g(tj1700) image"
spawn telnet $ip $port
set node_spawn_id $spawn_id
expect "*login*"
send "$user\r"
expect "*asswor*"
send "$user_pass\r"
expect  "*>"
send "su\r"
expect "*asswor*:"
send "$su_user_pass\r";
expect "*#"
send "ls $xcc_dir_tej\r"
expect "*img"
set current_img $expect_out(buffer)
if {![string match "*tj1700*img" $current_img]} {
puts "\n\nThe current image type being used at node is different than what u r uploading.\n\
Please retry with correct image.\n Current image being used is $current_img"
exit;
}
send "mount -o remount rw /etc/bin\r"
expect "*#"
send "cd $xcc_dir_tej_next\r"
expect "*#"
send "rm -rf $xcc_dir_tej_next/*;\r pwd;\rls\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\.md5\r"
expect "*#"
send "ncftpget -u$my_pc_user -p$my_pc_user_pass $my_ipaddr . $full_image_path\r"
expect "*#"
send "ls;pwd\r"
expect "*#"
interact
}

